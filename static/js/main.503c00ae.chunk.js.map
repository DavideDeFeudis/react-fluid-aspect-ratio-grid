{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Grid","children","maxAspectRatio","gap","gridRef","useRef","useState","width","height","size","setSize","columns","setColumns","useEffect","observer","createResizeObserver","useLayoutEffect","numOfItems","i","Math","itemAspectRatio","getColumns","React","styles","useMemo","display","gridTemplateColumns","gridGap","ResizeObserver","entries","ref","style","PropTypes","node","App","items","setItems","href","target","rel","onClick","newItems","pop","map","item","className","key","ReactDOM","render","document","getElementById"],"mappings":"wQAsBe,SAASA,EAAK,GAAmC,IAAjCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,eAAgBC,EAAO,EAAPA,IACjDC,EAAUC,mBAD8C,EAEtCC,mBAAS,CAAEC,MAAF,EAAYC,OAAQ,IAA9CC,EAFuD,KAEjDC,EAFiD,OAGhCJ,mBAHgC,GAGvDK,EAHuD,KAG9CC,EAH8C,KAK9DC,qBAAU,WACR,IAAMC,EAAWC,IAEjB,OADAD,UAAiBV,EAAjBU,SACO,kBAAMA,EAAN,gBAHTD,IAMAG,2BAAgB,WACdJ,EAzBe,SAACH,EAAMQ,EAAYf,GAGpC,IAHuD,IAC/CK,EAAkBE,EAD6B,MACxCD,EAAWC,EAD6B,OAEnDE,EAAJ,EACSO,EAAT,EAAgBA,EAAhB,EAAgCA,IAAK,CAInC,GADwBX,KADLC,EADNW,UAAUF,EAAvB,IAGIG,GAAoCT,IAAxC,EAAgE,MAChEA,IAEF,SAeaU,CAAWZ,EAAMa,mBAAP,GAArBV,MACC,CAACH,EAAMa,mBAFVN,KAIA,IAAMO,EAASC,mBACb,iBAAO,CACLC,QADK,OAELjB,OAFK,OAGLkB,oBAAqB,UAAF,EAHd,oBAILC,QAAS,GAAGxB,KAEd,CAACQ,EAPH,IAUMI,EAAuB,WAC3B,OAAO,IAAIa,gBAAe,YAAa,MACXC,KADW,YAC7BtB,EAD6B,QACtBC,EADsB,SAErCE,EAAQ,CAAEH,MAAF,EAASC,eAIrB,OACE,yBAAKsB,IAAL,EAAmBC,MAAOR,GAD5B,GAOFvB,YAAiB,CACfE,eAAgB8B,IADD,OAEf7B,IAAK6B,IAFU,OAGf/B,SAAU+B,IAAUC,M,cCLPC,MAvDf,WAAgB,IAAD,EACa5B,mBAAS,IADtB,mBACN6B,EADM,KACCC,EADD,KAab,OACE,oCACE,8BACE,gCACE,qEACA,2BACE,uBACEC,KAAK,kEACLC,OAAO,SACPC,IAAI,uBAHN,gBAQF,2BACE,uBACEF,KAAK,8DACLC,OAAO,SACPC,IAAI,uBAHN,gBAQF,6JAIA,4BAAQC,QArCA,WACdJ,EAAS,GAAD,mBAAKD,GAAL,CAAY,QAoCd,YACA,4BAAQK,QAlCG,WACjB,IAAMC,EAAQ,YAAON,GACrBM,EAASC,MACTN,EAASK,KA+BH,gBAEF,iCACE,kBAAC,EAAD,CAAMvC,eAAgB,IAAKC,IAAI,QAC5BgC,EAAMQ,KAAI,SAACC,EAAM1B,GAAP,OACT,yBAAK2B,UAAU,YAAYC,IAAK5B,YC5C9C6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.503c00ae.chunk.js","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useMemo\n} from 'react'\nimport PropTypes from 'prop-types'\n\nconst getColumns = (size, numOfItems, maxAspectRatio) => {\n  const { width, height } = size\n  let columns = 1\n  for (let i = 0; i < numOfItems; i++) {\n    const rows = Math.ceil(numOfItems / columns)\n    const itemHeight = height / rows\n    const itemAspectRatio = width / columns / itemHeight\n    if (itemAspectRatio < maxAspectRatio || columns === numOfItems) break\n    columns++\n  }\n  return columns\n}\n\nexport default function Grid({ children, maxAspectRatio, gap }) {\n  const gridRef = useRef()\n  const [size, setSize] = useState({ width: 0, height: 0 })\n  const [columns, setColumns] = useState(1)\n\n  useEffect(() => {\n    const observer = createResizeObserver()\n    observer.observe(gridRef.current)\n    return () => observer.disconnect()\n  }, [])\n\n  useLayoutEffect(() => {\n    setColumns(getColumns(size, React.Children.count(children), maxAspectRatio))\n  }, [size, React.Children.count(children)])\n\n  const styles = useMemo(\n    () => ({\n      display: 'grid',\n      height: '100%',\n      gridTemplateColumns: `repeat(${columns}, minmax(0, 1fr))`,\n      gridGap: `${gap}`\n    }),\n    [columns, gap]\n  )\n\n  const createResizeObserver = () => {\n    return new ResizeObserver((entries) => {\n      const { width, height } = entries[0].contentRect\n      setSize({ width, height })\n    })\n  }\n\n  return (\n    <div ref={gridRef} style={styles}>\n      {children}\n    </div>\n  )\n}\n\nGrid.propTypes = {\n  maxAspectRatio: PropTypes.number,\n  gap: PropTypes.string,\n  children: PropTypes.node\n}\n","import React, { useState } from 'react'\nimport Grid from 'react-fluid-aspect-ratio-grid'\nimport 'react-fluid-aspect-ratio-grid/dist/index.css'\n\nfunction App() {\n  const [items, setItems] = useState([])\n\n  const addItem = () => {\n    setItems([...items, {}])\n  }\n\n  const removeItem = () => {\n    const newItems = [...items]\n    newItems.pop()\n    setItems(newItems)\n  }\n\n  return (\n    <>\n      <main>\n        <header>\n          <h1>react-fluid-aspect-ratio-grid example</h1>\n          <p>\n            <a\n              href='https://github.com/DavideDeFeudis/react-fluid-aspect-ratio-grid'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              GitHub repo\n            </a>\n          </p>\n          <p>\n            <a\n              href='https://www.npmjs.com/package/react-fluid-aspect-ratio-grid'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              Npm package\n            </a>\n          </p>\n          <p>\n            Add/remove items and resize the window. The grid's children won't\n            exceed the specified max aspect-ratio (2.2 in this example).\n          </p>\n          <button onClick={addItem}>Add item</button>\n          <button onClick={removeItem}>Remove item</button>\n        </header>\n        <section>\n          <Grid maxAspectRatio={2.2} gap='1rem'>\n            {items.map((item, i) => (\n              <div className='grid-item' key={i}></div>\n            ))}\n          </Grid>\n        </section>\n      </main>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}